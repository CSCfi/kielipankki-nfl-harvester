"""
Zip-merging utilities for making publishable packages of NLF data.
"""

import sys
import pathlib
import tarfile
from zipfile import ZipFile, ZIP_DEFLATED, ZIP_STORED


def update_zip_with_tar(zip_fileobj, tar_filepath, args):
    with tarfile.open(tar_filepath) as tar:
        while True:
            tar_item = tar.next()
            if tar_item == None:
                break
            if not tar_item.isfile():
                # paths should be autogenerated in the zip
                continue
            iobuf = tar.extractfile(tar_item)
            if pathlib.Path(tar_item.name).suffix in args.no_compress:
                zip_fileobj.writestr(
                    tar_item.name,
                    iobuf.read(),
                    compress_type=ZIP_STORED,
                )
            else:
                zip_fileobj.writestr(tar_item.name, iobuf.read())


def update_zip_with_targets(args):
    """
    Create or update the zip in args.zipfilename with each target from args.sourcepaths.

    Targets are archives of some kind, and the paths within the targets will be used for
    storing the files in the zip. The only target file type currently supported is tar.
    In the future, other archives, like zips, should also be processed for contents.

    Files having an extension in args.no_compress will be stored without compression.
    """
    with ZipFile(args.zipfilename, mode="a", compression=ZIP_DEFLATED) as zipfile:
        for sourcepath in args.sourcepaths:
            if sourcepath.suffix == ".tar":
                update_zip_with_tar(zipfile, sourcepath, args)
            else:
                print(
                    f"Warning: tried to update zip with unknown format {sourcepath}",
                    sys.stderr,
                )


if __name__ == "__main__":
    import argparse

    argparser = argparse.ArgumentParser(
        prog="collect-to-zip",
        epilog="Optionally write additional source filenames to stdin",
    )
    argparser.add_argument("zipfilename", type=pathlib.Path, help="The target zip")
    argparser.add_argument(
        "--dir", type=pathlib.Path, help="Scan directory for sources"
    )
    argparser.add_argument(
        "--sourcelist", type=str, help="Read file for sources, or - for stdin"
    )
    argparser.add_argument("--verbose", action="store_true")
    argparser.add_argument(
        "--no-compress",
        "-n",
        help="A colon-separated list of suffixes to not compress, as in zip",
        default=".jpg:.jpeg:.jp2",
    )
    args = argparser.parse_args()
    args.sourcepaths = []
    if args.sourcelist:
        if args.sourcelist == "-":
            while True:
                try:
                    args.sourcepaths.append(pathlib.Path(input().strip()))
                except EOFError:
                    break
        else:
            args.sourcepaths += [
                pathlib.Path(line.strip()) for line in open(args.sourcelist)
            ]
    if args.dir.is_dir():
        args.sourcepaths += [path for path in args.dir.iterdir() if path.is_file()]

    args.no_compress = set(args.no_compress.split(":"))

    if args.verbose:
        print(f"Updating {args.zipfilename} with:", file=sys.stderr)
        for source in args.sourcepaths:
            print(f"  {source}", file=sys.stderr)

    update_zip_with_targets(args)
